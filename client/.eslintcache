[{"/Users/jinsuyu/Dev/film-mania/client/src/reportWebVitals.js":"1","/Users/jinsuyu/Dev/film-mania/client/src/components/views/LandingPage/LandingPage.js":"2","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Footer/Footer.js":"3","/Users/jinsuyu/Dev/film-mania/client/src/index.js":"4","/Users/jinsuyu/Dev/film-mania/client/src/components/Config.js":"5","/Users/jinsuyu/Dev/film-mania/client/src/components/App.js":"6","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Header/Header.js":"7","/Users/jinsuyu/Dev/film-mania/client/src/_actions/types.js":"8","/Users/jinsuyu/Dev/film-mania/client/src/hoc/auth.js":"9","/Users/jinsuyu/Dev/film-mania/client/src/_reducers/user_reducer.js":"10","/Users/jinsuyu/Dev/film-mania/client/src/_reducers/index.js":"11","/Users/jinsuyu/Dev/film-mania/client/src/_actions/user_actions.js":"12","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Navbar/Navbar.js":"13","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Navbar/RightNavbar.js":"14","/Users/jinsuyu/Dev/film-mania/client/src/components/views/RegisterPage/RegisterPage.js":"15","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/FreeBoard.js":"16","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Market/BuyBoard.js":"17","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Market/SellBoard.js":"18","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/QnaBoard.js":"19","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/WritePage/BoardWrite.js":"20","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/DetailBoard.js":"21","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/PhotoBoard.js":"22"},{"size":362,"mtime":1606584074911,"results":"23","hashOfConfig":"24"},{"size":318,"mtime":1606646554273,"results":"25","hashOfConfig":"24"},{"size":435,"mtime":1606642860209,"results":"26","hashOfConfig":"24"},{"size":1186,"mtime":1607001515340,"results":"27","hashOfConfig":"24"},{"size":57,"mtime":1606585729083,"results":"28","hashOfConfig":"24"},{"size":3202,"mtime":1607001344824,"results":"29","hashOfConfig":"24"},{"size":618,"mtime":1606998080573,"results":"30","hashOfConfig":"24"},{"size":166,"mtime":1606587082203,"results":"31","hashOfConfig":"24"},{"size":1506,"mtime":1606835418032,"results":"32","hashOfConfig":"24"},{"size":589,"mtime":1606587857613,"results":"33","hashOfConfig":"24"},{"size":157,"mtime":1606587082323,"results":"34","hashOfConfig":"24"},{"size":1034,"mtime":1606587082207,"results":"35","hashOfConfig":"24"},{"size":2885,"mtime":1606998061879,"results":"36","hashOfConfig":"24"},{"size":4766,"mtime":1606999607295,"results":"37","hashOfConfig":"24"},{"size":5288,"mtime":1606733638002,"results":"38","hashOfConfig":"24"},{"size":7150,"mtime":1607004840409,"results":"39","hashOfConfig":"24"},{"size":140,"mtime":1606741557901,"results":"40","hashOfConfig":"24"},{"size":155,"mtime":1606741557900,"results":"41","hashOfConfig":"24"},{"size":7165,"mtime":1607004050926,"results":"42","hashOfConfig":"24"},{"size":3283,"mtime":1606997426293,"results":"43","hashOfConfig":"24"},{"size":987,"mtime":1607007134712,"results":"44","hashOfConfig":"24"},{"size":152,"mtime":1606741476524,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"ndi6v7",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jinsuyu/Dev/film-mania/client/src/reportWebVitals.js",[],["99","100"],"/Users/jinsuyu/Dev/film-mania/client/src/components/views/LandingPage/LandingPage.js",["101"],"import React from 'react'\nimport { Button } from '@material-ui/core';\nimport { blueGrey } from '@material-ui/core/colors' \n\n\nfunction LandingPage() {\n\n    return (\n        <div style={{backgroundColor: blueGrey[800], width: '100%', height: '100%'}}>\n            test\n        </div>\n    )\n}\n\nexport default LandingPage\n",["102","103"],"/Users/jinsuyu/Dev/film-mania/client/src/components/views/Footer/Footer.js",[],["104","105"],"/Users/jinsuyu/Dev/film-mania/client/src/index.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/components/Config.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/components/App.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/components/views/Header/Header.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/_actions/types.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/hoc/auth.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/_reducers/user_reducer.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/_reducers/index.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/_actions/user_actions.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/components/views/Navbar/Navbar.js",["106"],"import React from 'react';\nimport MenuList from '@material-ui/core/MenuList';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { blueGrey } from '@material-ui/core/colors'\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: '90%',\n        margin: '20px auto',\n        backgroundColor: blueGrey[600],\n        color: 'white'\n\n    },\n});\n\n\nfunction NavBar() {\n    const classes = useStyles();\n    const preventDefault = event => event.preventDefault();\n\n    return (\n        <div style={{ backgroundColor: blueGrey[800], width: '15%', height: '100%', margin: '0 1rem' }}>\n            <Paper className={classes.root}>\n                <MenuList>\n                    <MenuItem disabled style={{ color: 'white' }} >\n                        <Typography style={{ color: 'white' }} variant=\"inherit\">게시판</Typography>\n                    </MenuItem>\n                    <hr style={{ borderStyle: 'dashed', color: blueGrey[700] }} />\n                    <Link to='/board/photo'>\n                        <MenuItem>\n                            <Typography variant=\"inherit\"> 사진게시판</Typography>\n                        </MenuItem>\n                    </Link>\n                    <hr style={{ borderStyle: 'dashed', color: blueGrey[700] }} />\n                    <Link to='/board/free'>\n                        <MenuItem>\n                            <Typography variant=\"inherit\">자유게시판</Typography>\n                        </MenuItem>\n                    </Link>\n                    <hr style={{ borderStyle: 'dashed', color: blueGrey[700] }} />\n                    <Link to='/board/qna'>\n                        <MenuItem>\n                            <Typography variant=\"inherit\">질문게시판</Typography>\n                        </MenuItem>\n                    </Link>\n                </MenuList>\n            </Paper>\n        <br />\n        <Paper className={classes.root}>\n            <MenuList>\n                <MenuItem disabled style={{ color: 'white' }} >\n                    <Typography style={{ color: 'white' }} variant=\"inherit\">중고장터\u001e</Typography>\n                </MenuItem>\n                <hr style={{ borderStyle: 'dashed', color: blueGrey[700] }} />\n                <MenuItem>\n                    <Typography variant=\"inherit\"><Link to='/board/buy'> 삽니다 </Link></Typography>\n                </MenuItem>\n                <hr style={{ borderStyle: 'dashed', color: blueGrey[700] }} />\n                <MenuItem>\n                    <Typography variant=\"inherit\"><Link to='/board/sell'>팝니다 </Link></Typography>\n                </MenuItem>\n            </MenuList>\n        </Paper>\n        </div >\n    )\n}\n\nexport default NavBar\n","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Navbar/RightNavbar.js",["107","108"],"import React, {useState} from 'react'\nimport Axios from 'axios';\nimport { USER_SERVER } from '../../Config';\nimport { useDispatch } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { loginUser } from '../../../_actions/user_actions';\nimport { blueGrey } from '@material-ui/core/colors'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Button } from '@material-ui/core';\nimport { useSelector } from \"react-redux\";\n\nfunction RightNavbar(props) {\n    const useStyles = makeStyles((theme) => ({\n        root: {\n          '& > *': {\n            margin: theme.spacing(1),\n            width: '90%',\n          },\n        },\n      }));\n    const classes = useStyles();\n    \n    const user = useSelector(state => state.user)\n\n    const [id, setId] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [nickname, setNickname] = useState(\"\");\n\n    const onIdHandler = (event) => {\n        setId(event.currentTarget.value);\n    }\n\n    const onPasswordHandler = (event) => {\n        setPassword(event.currentTarget.value);\n    }\n\n    const dispatch = useDispatch();\n\n    const loginHandler = (event) => {\n        event.preventDefault();\n        let body = {\n            id : id,\n            password : password\n        }\n\n        dispatch(loginUser(body))\n            .then(response => {\n                if(response.payload.loginSuccess) {\n                    window.location.reload();\n                } else {\n                    alert('Error');\n                }\n            });\n    }\n\n    const logoutHandler = () => {\n        Axios.get(`${USER_SERVER}/logout`).then(response => {\n          if (response.status === 200) {\n            window.location.reload();\n          } else {\n            alert('Log Out Failed')\n          }\n        });\n      };\n    \n    if (user.userData && !user.userData.isAuth) {\n    return (\n        <div style={{backgroundColor:blueGrey[800] , width: '15%', height: '100%', margin: '0 1rem'}}>\n            <div style={{border:'1px'}}>\n                <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={loginHandler}>\n                    <TextField\n                        required\n                        id=\"filled\"\n                        label=\"ID\"\n                        variant=\"filled\"\n                        InputProps={{\n                            style: {\n                                color: \"white\"\n                            }\n                        }}\n                        InputLabelProps={{\n                            style: { color: '#bbdefb' },\n                        }}\n                        onChange={onIdHandler}\n                    />\n                    <TextField\n                        required\n                        id=\"filled\"\n                        label=\"PW\"\n                        type=\"password\"\n                        variant=\"filled\"\n                        InputProps={{\n                            style: {\n                                color: \"white\"\n                            }\n                        }}\n                        InputLabelProps={{\n                            style: { color: '#bbdefb' },\n                        }}\n                        onChange={onPasswordHandler}\n                    />\n\n                    <Button variant=\"contained\" color=\"primary\" onClick={loginHandler}> 로그인 </Button>\n                    <Link to='/register'>   \n                        <Button variant=\"contained\" color=\"secondary\" style={{width: 'inherit'}}> 회원가입 </Button>\n                    </Link>\n                </form>\n                \n            </div>\n        </div>\n    )}\n    else {\n        return (\n            <div style={{backgroundColor:blueGrey[800] , width: '15%', height: '100%', margin: '0 1rem'}}>\n            <div style={{border:'1px'}}>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField\n                        disabled\n                        id=\"filled\"\n                        label=\"Nickname\"\n                        variant=\"filled\"\n                        InputProps={{\n                            style: {\n                                color: \"white\"\n                            },\n                            value: 'test'\n                        }}\n                        InputLabelProps={{\n                            style: { color: '#bbdefb' },\n                        }}\n                        \n                    />\n                    <Button variant=\"contained\" color=\"primary\" onClick={logoutHandler}> 로그아웃 </Button>\n                </form>\n            </div>\n        </div>\n        \n        )\n    }\n}\nexport default withRouter(RightNavbar)\n\n\n//export default RightNavbar\n","/Users/jinsuyu/Dev/film-mania/client/src/components/views/RegisterPage/RegisterPage.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/FreeBoard.js",["109","110"],"import React, { useEffect, useState, forwardRef } from 'react'\nimport { blueGrey } from '@material-ui/core/colors'\nimport { Button } from '@material-ui/core'\nimport Axios from 'axios';\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\n\nfunction FreeBoard() {\n\n  const [posts, setPosts] = useState([])\n  useEffect(() => {\n    Axios.get(\"/api/post/free\")\n      .then(response => {\n        if (response.data.success) {\n          setPosts(response.data.posts);\n        } else {\n          alert('자유게시판을 불러오는데 실패했습니다.')\n        }\n      });\n  }, [])\n\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, posts.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n\n  return (\n    <div style={{ backgroundColor: blueGrey[800], width: '100%', height: '100%' }} >\n      <br />\n      <div style={{ width: '95%', height: '85%', margin: 'auto' }}>\n      <h2>자유게시판</h2>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"custom pagination table\">\n            <TableHead>\n              <TableRow>\n                  <TableCell style={{ width: '5%' }}>\n                    no\n                  </TableCell>\n                  <TableCell style={{ width: '75%', textAlign:'center'  }}>\n                    제목\n                  </TableCell>\n                  <TableCell style={{ width: '10%', textAlign:'center' }}>\n                    작성자\n                  </TableCell>\n                  <TableCell style={{ width: '10%', textAlign:'center'  }}>\n                    열람수\n                  </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {(rowsPerPage > 0\n                ? posts.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                : posts\n              ).map((post) => (\n                <TableRow key={post.postId}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {post.postId}\n                  </TableCell>\n                  <TableCell style={{ width: 160, maxWidth:160, overflow: 'auto' }} align=\"left\">\n                  <Link to={{\n                      pathname : `/board/free/${post.postId}`,\n                  }} style={{color: \"black\"}}>\n                    {post.title}\n                  </Link>\n                  </TableCell>\n                  <TableCell style={{ width: 160, maxWidth:160, overflow: 'auto'}} align=\"center\">\n                      {post.writer.nickname}\n                  </TableCell>\n                  <TableCell style={{ width: 160 }} align=\"center\">\n                    {post.views}\n                  </TableCell>\n                </TableRow>\n              ))}\n\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={1} />\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  rowsPerPageOptions={[10]}\n                  colSpan={4}\n                  count={posts.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  SelectProps={{\n                    inputProps: { 'aria-label': 'rows per page' },\n                    native: true,\n                  }}\n                  onChangePage={handleChangePage}\n                  onChangeRowsPerPage={handleChangeRowsPerPage}\n                  ActionsComponent={TablePaginationActions}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </div>\n\n      <div style={{ width: '95%', margin: '0 auto', textAlign: 'end' }}>\n        <Link to={{\n          pathname : '/board/free/write',\n          // state : { type : free }\n        }}>\n          <Button variant=\"contained\" color=\"primary\"> 글쓰기 </Button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default FreeBoard\n","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Market/BuyBoard.js",[],["111","112"],"/Users/jinsuyu/Dev/film-mania/client/src/components/views/Market/SellBoard.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/QnaBoard.js",["113","114"],"import React, { useEffect, useState, forwardRef } from 'react'\nimport { blueGrey } from '@material-ui/core/colors'\nimport { Button } from '@material-ui/core'\nimport Axios from 'axios';\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\n\nfunction QnaBoard() {\n\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    Axios.get(\"/api/post/qna\")\n      .then(response => {\n        if (response.data.success) {\n          setPosts(response.data.posts);\n        } else {\n          alert('자유게시판을 불러오는데 실패했습니다.')\n        }\n      });\n  }, [])\n\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, posts.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n\n  return (\n    <div style={{ backgroundColor: blueGrey[800], width: '100%', height: '100%' }} >\n      <br />\n\n      <div style={{ width: '95%', height: '85%', margin: 'auto' }}>\n        <h2>자유게시판</h2>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"custom pagination table\">\n            <TableHead>\n              <TableRow>\n                  <TableCell style={{ width: '5%' }}>\n                    no\n                  </TableCell>\n                  <TableCell style={{ width: '75%', textAlign:'center'  }}>\n                    제목\n                  </TableCell>\n                  <TableCell style={{ width: '10%', textAlign:'center' }}>\n                    작성자\n                  </TableCell>\n                  <TableCell style={{ width: '10%', textAlign:'center'  }}>\n                    열람수\n                  </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {(rowsPerPage > 0\n                ? posts.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                : posts\n              ).map((row) => (\n                <TableRow key={row.postId}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.postId}\n                  </TableCell>\n                  <TableCell style={{ width: 160, maxWidth:160, overflow: 'auto' }} align=\"left\">\n                  <Link to={{\n                      pathname : `/board/qna/${row.postId}`,\n                  }} style={{color: \"black\"}}>\n                    {row.title}\n                  </Link>\n                  </TableCell>\n                  <TableCell style={{ width: 160, maxWidth:160, overflow: 'auto'}} align=\"center\">\n                      {row.writer.nickname}\n                  </TableCell>\n                  <TableCell style={{ width: 160 }} align=\"center\">\n                    {row.views}\n                  </TableCell>\n                </TableRow>\n              ))}\n\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={1} />\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  rowsPerPageOptions={[10]}\n                  colSpan={4}\n                  count={posts.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  SelectProps={{\n                    inputProps: { 'aria-label': 'rows per page' },\n                    native: true,\n                  }}\n                  onChangePage={handleChangePage}\n                  onChangeRowsPerPage={handleChangeRowsPerPage}\n                  ActionsComponent={TablePaginationActions}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </div>\n\n      <div style={{ width: '95%', margin: '0 auto', textAlign: 'end' }}>\n        <Link to={{\n          pathname : `/board/qna/write`,\n          state : {\n            postType: 'qna'\n          }\n        }}>\n          <Button variant=\"contained\" color=\"primary\"> 글쓰기 </Button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default QnaBoard\n","/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/WritePage/BoardWrite.js",[],"/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/DetailBoard.js",["115"],"/Users/jinsuyu/Dev/film-mania/client/src/components/views/Board/PhotoBoard.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":16},{"ruleId":"116","replacedBy":"124"},{"ruleId":"118","replacedBy":"125"},{"ruleId":"116","replacedBy":"126"},{"ruleId":"118","replacedBy":"127"},{"ruleId":"120","severity":1,"message":"128","line":23,"column":11,"nodeType":"122","messageId":"123","endLine":23,"endColumn":25},{"ruleId":"120","severity":1,"message":"129","line":27,"column":12,"nodeType":"122","messageId":"123","endLine":27,"endColumn":20},{"ruleId":"120","severity":1,"message":"130","line":27,"column":22,"nodeType":"122","messageId":"123","endLine":27,"endColumn":33},{"ruleId":"120","severity":1,"message":"131","line":1,"column":38,"nodeType":"122","messageId":"123","endLine":1,"endColumn":48},{"ruleId":"120","severity":1,"message":"132","line":5,"column":27,"nodeType":"122","messageId":"123","endLine":5,"endColumn":33},{"ruleId":"116","replacedBy":"133"},{"ruleId":"118","replacedBy":"134"},{"ruleId":"120","severity":1,"message":"131","line":1,"column":38,"nodeType":"122","messageId":"123","endLine":1,"endColumn":48},{"ruleId":"120","severity":1,"message":"132","line":5,"column":27,"nodeType":"122","messageId":"123","endLine":5,"endColumn":33},{"ruleId":"135","severity":1,"message":"136","line":20,"column":8,"nodeType":"137","endLine":20,"endColumn":10,"suggestions":"138"},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar",["139"],["140"],["139"],["140"],"'preventDefault' is assigned a value but never used.","'nickname' is assigned a value but never used.","'setNickname' is assigned a value but never used.","'forwardRef' is defined but never used.","'Router' is defined but never used.",["139"],["140"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'postId' and 'postType'. Either include them or remove the dependency array.","ArrayExpression",["141"],"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},"Update the dependencies array to be: [postId, postType]",{"range":"144","text":"145"},[591,593],"[postId, postType]"]